-- This file and its contents are licensed under the Timescale License.
-- Please see the included NOTICE for copyright information and
-- LICENSE-TIMESCALE for a copy of the license.

-- Table with non-overlapping data across data-nodes to test gapfill pushdown to data nodes
DROP TABLE IF EXISTS test_gapfill CASCADE;
CREATE TABLE test_gapfill(time timestamp, name text, value numeric);

SELECT table_name from create_distributed_hypertable('test_gapfill', 'time', partitioning_column => 'name');

INSERT INTO test_gapfill VALUES
    ('2018-01-01 06:01', 'one', 1.2),
    ('2018-01-02 09:11', 'two', 4.3),
    ('2018-01-03 08:01', 'three', 7.3),
    ('2018-01-04 08:01', 'one', 0.23),
    ('2018-07-05 08:01', 'five', 0.0),
    ('2018-07-06 06:01', 'forty', 3.1),
    ('2018-07-07 09:11', 'eleven', 10303.12),
    ('2018-07-08 08:01', 'ten', 64);

ANALYZE test_gapfill;

-- Make table with data nodes overlapping
DROP TABLE IF EXISTS test_gapfill_overlap CASCADE;
CREATE TABLE test_gapfill_overlap(time timestamp, name text, value numeric);

SELECT table_name from create_distributed_hypertable('test_gapfill_overlap', 'time', partitioning_column => 'name');

INSERT INTO test_gapfill_overlap SELECT  * FROM test_gapfill;

SELECT set_number_partitions('test_gapfill_overlap', 4);

INSERT INTO test_gapfill_overlap VALUES
('2020-01-01 06:01', 'eleven', 1.2),
('2020-01-02 09:11', 'twenty-two', 4.3),
('2020-01-03 08:01', 'three', 7.3),
('2020-01-04 08:01', 'one', 0.23),
('2020-07-05 08:01', 'five', 0.0),
('2020-07-06 06:01', 'forty-six', 3.1),
('2020-07-07 09:11', 'eleven', 10303.12),
('2020-07-08 08:01', 'ten', 64);

ANALYZE test_gapfill_overlap;

\set ON_ERROR_STOP 0

SET enable_partitionwise_aggregate = 'on';
SET timescaledb.enable_remote_explain = true;

-- Cases where gapfill is pushed down to data-nodes
EXPLAIN (VERBOSE, COSTS OFF) SELECT time_bucket_gapfill('3 hours', time, '2017-01-01 06:00', '2017-01-01 18:00'),
       name,
       first(value, time),
       avg(value)
FROM test_gapfill
GROUP BY 1,2;

EXPLAIN (VERBOSE, COSTS OFF) SELECT time_bucket_gapfill('3 hours', time, '2017-01-01 06:00', '2017-01-01 18:00'),
       name,
       first(value, time),
       avg(value)
FROM test_gapfill
GROUP BY 2,1;

-- Check for multiple gapfill calls
SELECT time_bucket_gapfill('3 hours', time, '2017-01-01 06:00', '2017-01-01 18:00'),
       time_bucket_gapfill('6 hours', time, '2017-01-01 08:00', '2017-01-01 18:00'),
       name,
       first(value, time),
       avg(value)
FROM test_gapfill
GROUP BY 2,1,3;

-- Cases where gapfill is not pushed down to data-nodes

-- Space dimension is not in group by clause
EXPLAIN (VERBOSE, COSTS OFF) SELECT time_bucket_gapfill('3 hours', time, '2017-01-01 06:00', '2017-01-02 18:00'),
       first(value, time),
       avg(value)
FROM test_gapfill
GROUP BY 1;

-- Window functions
EXPLAIN (VERBOSE, COSTS OFF) SELECT
  time_bucket_gapfill('3 hours', time, '2017-01-01 06:00', '2017-01-01 18:00'),
  lag(min(time)) OVER ()
FROM test_gapfill
GROUP BY 1;

-- Data nodes are overlapping

EXPLAIN (VERBOSE, COSTS OFF) SELECT time_bucket_gapfill('3 hours', time, '2018-01-01 06:00', '2018-01-01 18:00'),
       name,
       first(value, time),
       avg(value)
FROM test_gapfill_overlap
GROUP BY 1,2;

SET timescaledb.enable_remote_explain = false;

DROP TABLE test_gapfill;
DROP TABLE test_gapfill_overlap;
